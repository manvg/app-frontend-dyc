name: üöÄ Build, Publish & Deploy Frontend

on:
  push:
    branches:
      - master
      - develop

jobs:
  build-push:
    name: üõ†Ô∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci -- --legacy-peer-deps

      - name: Build Angular (prod)
        run: npm run build -- --configuration production

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            jayirong/app-frontend-dyc:latest
            jayirong/app-frontend-dyc:${{ github.sha }}

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      # Cargamos la clave SSH
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Conexi√≥n + despliegue
      - name: SSH & deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # 1) Paramos el nginx del host para liberar el 80
            sudo systemctl stop nginx || true

            # 2) Tiramos el contenedor anterior y traemos la √∫ltima imagen
            docker pull jayirong/app-frontend-dyc:latest
            docker stop frontend || true
            docker rm frontend  || true

            # 3) Levantamos el contenedor con tu SPA
            docker run -d \
              --name frontend \
              --restart unless-stopped \
              -p 80:80 \
              jayirong/app-frontend-dyc:latest
          EOF
